"""
Проанализировать скорость и сложность одного любого алгоритма,
разработанных в рамках домашнего задания первых трех уроков.
Примечание: попробуйте написать несколько реализаций алгоритма и сравнить их.

Найти сумму n элементов следующего ряда чисел: 1, -0.5, 0.25, -0.125,
Количество элементов (n) вводится с клавиатуры.

"""
from timeit import timeit
import cProfile


def recursion_sum(x, i):
    if x < 2:
        return first
    i = i * step
    return i + recursion_sum(x - 1, i)


def formula_sum(x):
    return first * (step ** x - 1) / (step - 1)


def cycle_sum(x):
    summa = 0
    item = first
    for _ in range(x):
        summa += item
        item *= step
    return summa


def main():
    print('======= 1 - рекурсия =======')
    # Первый вариант: result = recursion_sum(n, first)
    for r in range(n):
        res = timeit(f'result = recursion_sum({r * 5}, first)', number=100, globals=globals())
        print(f'{res:5.6f}')
    print(f'Рекурсия: {recursion_sum(n, first)}')

    print('======= 2 - формула =======')
    # Второй вариант: result = formula_sum(n)
    for r in range(n):
        res = timeit(f'result = formula_sum({r * 5})', number=100, globals=globals())
        print(f'{res:5.6f}')
    print(f'По формуле: {formula_sum(n)}')

    print('\n======= 3 - цикл =======')
    # Третий вариант: result = cycle_sum(n)
    for r in range(n):
        res = timeit(f'result = cycle_sum({r * 5})', number=100, globals=globals())
        print(f'{res:5.6f}')
    print(f'В цикле: {cycle_sum(n)}')


first = 1
step = - 0.5
n = 100  # n = int(input('Введите количество элементов ряда: '))

cProfile.run('main()')
main()

"""
Самый быстрый способ - второй (по формуле). Время работы почти не зависит от количества элементов. Задача решается 
в одно вычисление.
Второй по скорости способ - с помощью цикла.
Самый медленный способ - с помощью рекурсии, за счет огромного количества вызовов функции. К сожалению из-за
ошибки переполнения стека не удалось сравнить время выполнения на больших значениях.

==== 1 - рекурсия ====      ==== 2 - формула ====          ======= 3 - цикл =======
0.000009                    0.000017                       0.000016
0.000050                    0.000038                       0.000044
0.000093                    0.000026                       0.000065
0.000178                    0.000026                       0.000086
0.000179                    0.000026                       0.000107
0.000227                    0.000026                       0.000128
0.000300                    0.000057                       0.000149
0.000341                    0.000026                       0.000169
0.000370                    0.000026                       0.000191
0.000463                    0.000026                       0.000211
0.000471                    0.000026                       0.000223
0.000606                    0.000025                       0.000240
0.000637                    0.000025                       0.000277
0.000660                    0.000025                       0.000279
0.000660                    0.000025                       0.000300
0.000863                    0.000025                       0.000318
0.000759                    0.000025                       0.000337
0.000829                    0.000025                       0.000614
0.000857                    0.000024                       0.000415
0.000903                    0.000025                       0.000398
0.000952                    0.000024                       0.000420
0.001125                    0.000025                       0.000438
0.001056                    0.000025                       0.000459
0.001106                    0.000025                       0.000521

         2501514 function calls (36015 primitive calls) in 0.827 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
 2475200/10001    0.685    0.000    0.685    0.000 Task4-1.py:14(recursion_sum)
    10001    0.003    0.000    0.003    0.000 Task4-1.py:21(formula_sum)
    10001    0.110    0.000    0.110    0.000 Task4-1.py:25(cycle_sum)
 

"""